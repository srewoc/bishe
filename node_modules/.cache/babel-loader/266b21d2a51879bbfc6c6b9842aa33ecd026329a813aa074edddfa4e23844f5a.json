{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.some.js\";\nexport default {\n  data() {\n    return {\n      // 题库数据\n      questions: [{\n        title: \"问题 1: 选择正确的选项\",\n        type: \"single\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: 'A',\n        answer: 'null'\n      }, {\n        title: \"问题 2: 选择多个选项\",\n        type: \"multiple\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: []\n      }, {\n        title: \"问题 3: 选择正确的选项\",\n        type: \"single\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: null\n      }, {\n        title: \"问题 4: 选择多个选项\",\n        type: \"multiple\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: []\n      }, {\n        title: \"问题 5: 选择正确的选项\",\n        type: \"single\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: null\n      }, {\n        title: \"问题 6: 选择多个选项\",\n        type: \"multiple\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: []\n      }, {\n        title: \"问题 7: 选择正确的选项\",\n        type: \"single\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: null\n      }, {\n        title: \"问题 8: 选择多个选项\",\n        type: \"multiple\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: []\n      }, {\n        title: \"问题 9: 选择正确的选项\",\n        type: \"single\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: null\n      }, {\n        title: \"问题 10: 选择多个选项\",\n        type: \"multiple\",\n        options: [\"A\", \"B\", \"C\", \"D\"],\n        answered: false,\n        answer: []\n      }],\n      currentQuestionIndex: 0,\n      // 当前题目索引\n      currentAnswer: [] // 当前题目的答案\n    };\n  },\n  computed: {\n    // 获取当前显示的题目\n    currentQuestion() {\n      return this.questions[this.currentQuestionIndex];\n    },\n    // 是否禁用提交按钮\n    isSubmitDisabled() {\n      // 如果有任何题目未答，则禁用提交按钮\n      return this.questions.some(question => !question.answered);\n    }\n  },\n  methods: {\n    // 跳转到指定题目\n    goToQuestion(index) {\n      this.currentQuestionIndex = index;\n      const currentQuestion = this.questions[index];\n\n      // 如果题目已答过，恢复答案\n      if (currentQuestion.answered) {\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;\n      } else {\n        // 否则，不显示任何答案（保持空白状态）\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;\n      }\n    },\n    // 下一题\n    nextQuestion() {\n      if (this.currentQuestionIndex < this.questions.length - 1) {\n        this.autoSaveAnswer(); // 自动保存答案\n        this.currentQuestionIndex++; // 跳转到下一题\n        this.restoreAnswerIfNeeded(); // 恢复下一个题目的答案（如果有）\n      }\n    },\n    // 上一题\n    previousQuestion() {\n      if (this.currentQuestionIndex > 0) {\n        this.autoSaveAnswer(); // 自动保存答案\n        this.currentQuestionIndex--; // 跳转到上一题\n        this.restoreAnswerIfNeeded(); // 恢复上一个题目的答案（如果有）\n      }\n    },\n    // 自动保存答案\n    autoSaveAnswer() {\n      const currentQuestion = this.questions[this.currentQuestionIndex];\n      // 只有在当前题目有答案时才保存\n      if (this.currentAnswer !== null && this.currentAnswer.length > 0) {\n        currentQuestion.answer = this.currentAnswer; // 保存答案\n        currentQuestion.answered = true; // 标记为已答\n      }\n    },\n    // 恢复答案，如果已经答过\n    restoreAnswerIfNeeded() {\n      const currentQuestion = this.questions[this.currentQuestionIndex];\n      if (currentQuestion.answered) {\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;\n      } else {\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;\n      }\n    },\n    // 回答选项变化时，自动保存\n    onAnswerChange() {\n      this.autoSaveAnswer();\n      // 移除自动跳转的逻辑，完全由用户控制\n    },\n    // 提交答案\n    submit() {\n      if (this.isSubmitDisabled) {\n        this.$message.warning(\"请完成所有题目后再提交！\");\n      } else {\n        alert(\"已提交答案！\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["data","questions","title","type","options","answered","answer","currentQuestionIndex","currentAnswer","computed","currentQuestion","isSubmitDisabled","some","question","methods","goToQuestion","index","Array","isArray","nextQuestion","length","autoSaveAnswer","restoreAnswerIfNeeded","previousQuestion","onAnswerChange","submit","$message","warning","alert"],"sources":["C:\\Users\\C\\Desktop\\bishe\\src\\components\\student\\SingleChoice.vue"],"sourcesContent":["<template>\r\n  <el-row style=\"width: 100%\" class=\"first\">\r\n    <!-- 左侧当前题目 -->\r\n      <div class=\"question-container\">\r\n        <h3>{{ currentQuestion.title }}</h3>\r\n          <el-radio-group v-model=\"currentAnswer\" @change=\"onAnswerChange\" class=\"optiongroup\">\r\n            <el-radio\r\n                v-for=\"(option, index) in currentQuestion.options\"\r\n                :key=\"index\"\r\n                :label=\"index\"\r\n            >\r\n              {{ option }}\r\n            </el-radio>\r\n          </el-radio-group>\r\n      </div>\r\n    </el-row>\r\n\r\n  <el-row class=\"second\">\r\n    <div class=\"navigation-buttons\">\r\n      <el-button @click=\"previousQuestion\" :disabled=\"currentQuestionIndex === 0\">\r\n        上一题\r\n      </el-button>\r\n      <el-button @click=\"nextQuestion\" :disabled=\"currentQuestionIndex === questions.length - 1\">\r\n        下一题\r\n      </el-button>\r\n      <el-button\r\n          @click=\"submit\"\r\n          :disabled=\"isSubmitDisabled\"\r\n          type=\"primary\"\r\n      >\r\n        提交\r\n      </el-button>\r\n    </div>\r\n  </el-row>\r\n</template>\r\n\r\n<!--<script setup>-->\r\n<!--import { 'ref' } from vue-->\r\n<!--const problem = {-->\r\n<!--  -->\r\n<!--}-->\r\n\r\n<!--</script>-->\r\n\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      // 题库数据\r\n      questions: [\r\n        { title: \"问题 1: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: 'A', answer: 'null' },\r\n        { title: \"问题 2: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },\r\n        { title: \"问题 3: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },\r\n        { title: \"问题 4: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },\r\n        { title: \"问题 5: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },\r\n        { title: \"问题 6: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },\r\n        { title: \"问题 7: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },\r\n        { title: \"问题 8: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },\r\n        { title: \"问题 9: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },\r\n        { title: \"问题 10: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },\r\n      ],\r\n      currentQuestionIndex: 0, // 当前题目索引\r\n      currentAnswer: [], // 当前题目的答案\r\n    };\r\n  },\r\n  computed: {\r\n    // 获取当前显示的题目\r\n    currentQuestion() {\r\n      return this.questions[this.currentQuestionIndex];\r\n    },\r\n    // 是否禁用提交按钮\r\n    isSubmitDisabled() {\r\n      // 如果有任何题目未答，则禁用提交按钮\r\n      return this.questions.some(question => !question.answered);\r\n    }\r\n  },\r\n  methods: {\r\n    // 跳转到指定题目\r\n    goToQuestion(index) {\r\n      this.currentQuestionIndex = index;\r\n      const currentQuestion = this.questions[index];\r\n\r\n      // 如果题目已答过，恢复答案\r\n      if (currentQuestion.answered) {\r\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;\r\n      } else {\r\n        // 否则，不显示任何答案（保持空白状态）\r\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;\r\n      }\r\n    },\r\n    // 下一题\r\n    nextQuestion() {\r\n      if (this.currentQuestionIndex < this.questions.length - 1) {\r\n        this.autoSaveAnswer(); // 自动保存答案\r\n        this.currentQuestionIndex++; // 跳转到下一题\r\n        this.restoreAnswerIfNeeded(); // 恢复下一个题目的答案（如果有）\r\n      }\r\n    },\r\n    // 上一题\r\n    previousQuestion() {\r\n      if (this.currentQuestionIndex > 0) {\r\n        this.autoSaveAnswer(); // 自动保存答案\r\n        this.currentQuestionIndex--; // 跳转到上一题\r\n        this.restoreAnswerIfNeeded(); // 恢复上一个题目的答案（如果有）\r\n      }\r\n    },\r\n    // 自动保存答案\r\n    autoSaveAnswer() {\r\n      const currentQuestion = this.questions[this.currentQuestionIndex];\r\n      // 只有在当前题目有答案时才保存\r\n      if (this.currentAnswer !== null && this.currentAnswer.length > 0) {\r\n        currentQuestion.answer = this.currentAnswer; // 保存答案\r\n        currentQuestion.answered = true; // 标记为已答\r\n      }\r\n    },\r\n    // 恢复答案，如果已经答过\r\n    restoreAnswerIfNeeded() {\r\n      const currentQuestion = this.questions[this.currentQuestionIndex];\r\n      if (currentQuestion.answered) {\r\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;\r\n      } else {\r\n        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;\r\n      }\r\n    },\r\n    // 回答选项变化时，自动保存\r\n    onAnswerChange() {\r\n      this.autoSaveAnswer();\r\n      // 移除自动跳转的逻辑，完全由用户控制\r\n    },\r\n    // 提交答案\r\n    submit() {\r\n      if (this.isSubmitDisabled) {\r\n        this.$message.warning(\"请完成所有题目后再提交！\");\r\n      } else {\r\n        alert(\"已提交答案！\");\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* 左侧题目 */\r\n.question-container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n\r\n}\r\n\r\n.navigation-buttons {\r\n  margin-top: 20px;\r\n}\r\n\r\n.question-grid {\r\n  width: 200px;\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr); /* 每行 5 个题目 */\r\n  grid-gap: 10px;\r\n  .el-button{\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.question-grid .el-button {\r\n  width: 40px; /* 使按钮宽度自适应 */\r\n  height: 40px; /* 统一按钮高度 */\r\n  padding: 0;\r\n}\r\n\r\n.first{\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.second{\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.optiongroup{\r\n  display: grid;\r\n\r\n}\r\n\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}