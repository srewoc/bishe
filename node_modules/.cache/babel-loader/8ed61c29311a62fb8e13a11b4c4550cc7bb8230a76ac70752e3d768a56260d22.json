{"ast":null,"code":"import { ref } from 'vue';\n\n// let currentQuestionIndex = 0;\n\nexport default {\n  __name: 'SingleChoice',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    let select = ref('');\n    const currentQuestion = {\n      title: 'abcasdfdsasdafasdhjkfsdajfhjkfasdhjkfsadfhjkafhdsa',\n      optionA: \"A.111asdfghjsdjkasdfghasdjuifhs\",\n      optionB: \"B.112asdfjhksdafkhasdf\",\n      optionC: \"C.113fasdjkhsafdksdafjhsda\",\n      optionD: \"D.114fasdhujksdfhaksdjfkhj\"\n    };\n    const __returned__ = {\n      get select() {\n        return select;\n      },\n      set select(v) {\n        select = v;\n      },\n      currentQuestion,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","select","currentQuestion","title","optionA","optionB","optionC","optionD"],"sources":["C:/Users/C/Desktop/bishe/src/components/student/problem/SingleChoice.vue"],"sourcesContent":["<template>\r\n  <el-row style=\"width: 100%\" class=\"first\">\r\n    <div class=\"question-container\">\r\n      <h3>{{ currentQuestion.title }}</h3>\r\n      <el-radio-group class=\"optiongroup\" v-model=\"select\">\r\n        <el-radio\r\n            label=\"A\"\r\n        >\r\n          {{currentQuestion.optionA}}\r\n        </el-radio>\r\n        <el-radio\r\n            label=\"B\"\r\n        >\r\n          {{currentQuestion.optionB}}\r\n        </el-radio>\r\n        <el-radio\r\n            label=\"C\"\r\n        >\r\n          {{currentQuestion.optionC}}\r\n        </el-radio>\r\n        <el-radio\r\n            label=\"D\"\r\n        >\r\n          {{currentQuestion.optionD}}\r\n        </el-radio>\r\n      </el-radio-group>\r\n    </div>\r\n  </el-row>\r\n\r\n</template>\r\n\r\n<script setup>\r\nimport {ref} from 'vue'\r\n\r\n// let currentQuestionIndex = 0;\r\n\r\nlet select = ref('')\r\n\r\nconst currentQuestion = {\r\n  title: 'abcasdfdsasdafasdhjkfsdajfhjkfasdhjkfsadfhjkafhdsa',\r\n  optionA: \"A.111asdfghjsdjkasdfghasdjuifhs\",\r\n  optionB: \"B.112asdfjhksdafkhasdf\",\r\n  optionC: \"C.113fasdjkhsafdksdafjhsda\",\r\n  optionD: \"D.114fasdhujksdfhaksdjfkhj\"\r\n};\r\n\r\n\r\n\r\n\r\n</script>\r\n\r\n\r\n<!--<script>-->\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      // 题库数据-->\r\n<!--      questions: [-->\r\n<!--        { title: \"问题 1: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: 'A', answer: 'null' },-->\r\n<!--        { title: \"问题 2: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 3: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 4: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 5: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 6: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 7: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 8: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 9: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 10: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--      ],-->\r\n<!--      currentQuestionIndex: 0, // 当前题目索引-->\r\n<!--      currentAnswer: [], // 当前题目的答案-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  computed: {-->\r\n<!--    // 获取当前显示的题目-->\r\n<!--    currentQuestion() {-->\r\n<!--      return this.questions[this.currentQuestionIndex];-->\r\n<!--    },-->\r\n<!--    // 是否禁用提交按钮-->\r\n<!--    isSubmitDisabled() {-->\r\n<!--      // 如果有任何题目未答，则禁用提交按钮-->\r\n<!--      return this.questions.some(question => !question.answered);-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    // 跳转到指定题目-->\r\n<!--    goToQuestion(index) {-->\r\n<!--      this.currentQuestionIndex = index;-->\r\n<!--      const currentQuestion = this.questions[index];-->\r\n\r\n<!--      // 如果题目已答过，恢复答案-->\r\n<!--      if (currentQuestion.answered) {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;-->\r\n<!--      } else {-->\r\n<!--        // 否则，不显示任何答案（保持空白状态）-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 下一题-->\r\n<!--    nextQuestion() {-->\r\n<!--      if (this.currentQuestionIndex < this.questions.length - 1) {-->\r\n<!--        this.autoSaveAnswer(); // 自动保存答案-->\r\n<!--        this.currentQuestionIndex++; // 跳转到下一题-->\r\n<!--        this.restoreAnswerIfNeeded(); // 恢复下一个题目的答案（如果有）-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 上一题-->\r\n<!--    previousQuestion() {-->\r\n<!--      if (this.currentQuestionIndex > 0) {-->\r\n<!--        this.autoSaveAnswer(); // 自动保存答案-->\r\n<!--        this.currentQuestionIndex&#45;&#45;; // 跳转到上一题-->\r\n<!--        this.restoreAnswerIfNeeded(); // 恢复上一个题目的答案（如果有）-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 自动保存答案-->\r\n<!--    autoSaveAnswer() {-->\r\n<!--      const currentQuestion = this.questions[this.currentQuestionIndex];-->\r\n<!--      // 只有在当前题目有答案时才保存-->\r\n<!--      if (this.currentAnswer !== null && this.currentAnswer.length > 0) {-->\r\n<!--        currentQuestion.answer = this.currentAnswer; // 保存答案-->\r\n<!--        currentQuestion.answered = true; // 标记为已答-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 恢复答案，如果已经答过-->\r\n<!--    restoreAnswerIfNeeded() {-->\r\n<!--      const currentQuestion = this.questions[this.currentQuestionIndex];-->\r\n<!--      if (currentQuestion.answered) {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;-->\r\n<!--      } else {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 回答选项变化时，自动保存-->\r\n<!--    onAnswerChange() {-->\r\n<!--      this.autoSaveAnswer();-->\r\n<!--      // 移除自动跳转的逻辑，完全由用户控制-->\r\n<!--    },-->\r\n<!--    // 提交答案-->\r\n<!--    submit() {-->\r\n<!--      if (this.isSubmitDisabled) {-->\r\n<!--        this.$message.warning(\"请完成所有题目后再提交！\");-->\r\n<!--      } else {-->\r\n<!--        alert(\"已提交答案！\");-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<style scoped>\r\n/* 左侧题目 */\r\n.question-container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n\r\n}\r\n\r\n.navigation-buttons {\r\n  margin-top: 20px;\r\n}\r\n\r\n.question-grid {\r\n  width: 200px;\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr); /* 每行 5 个题目 */\r\n  grid-gap: 10px;\r\n\r\n  .el-button {\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.question-grid .el-button {\r\n  width: 40px; /* 使按钮宽度自适应 */\r\n  height: 40px; /* 统一按钮高度 */\r\n  padding: 0;\r\n}\r\n\r\n.first {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.second {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.optiongroup {\r\n  display: grid;\r\n\r\n}\r\n\r\n</style>\r\n\r\n"],"mappings":"AAgCA,SAAQA,GAAG,QAAO,KAAK;;AAEvB;;;;;;;;IAEA,IAAIC,MAAM,GAAGD,GAAG,CAAC,EAAE,CAAC;IAEpB,MAAME,eAAe,GAAG;MACtBC,KAAK,EAAE,oDAAoD;MAC3DC,OAAO,EAAE,iCAAiC;MAC1CC,OAAO,EAAE,wBAAwB;MACjCC,OAAO,EAAE,4BAA4B;MACrCC,OAAO,EAAE;IACX,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}