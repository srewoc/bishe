{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"question-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_radio = _resolveComponent(\"el-radio\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  return _openBlock(), _createBlock(_component_el_row, {\n    style: {\n      \"width\": \"100%\"\n    },\n    class: \"first\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h3\", null, null, -1 /* HOISTED */)), _createVNode(_component_el_radio_group, {\n      class: \"optiongroup\",\n      modelValue: _ctx.select,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.select = $event)\n    }, {\n      default: _withCtx(() => [_createVNode(_component_el_radio, {\n        label: \"A\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($props.question.opa), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_radio, {\n        label: \"B\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($props.question.opb), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_radio, {\n        label: \"C\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($props.question.opc), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }), _createVNode(_component_el_radio, {\n        label: \"D\"\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString($props.question.opd), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])])]),\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"names":["class","_createBlock","_component_el_row","style","default","_withCtx","_createElementVNode","_hoisted_1","_createVNode","_component_el_radio_group","modelValue","_ctx","select","_cache","$event","_component_el_radio","label","_createTextVNode","_toDisplayString","$props","question","opa","_","opb","opc","opd"],"sources":["C:\\Users\\C\\Desktop\\bishe\\src\\components\\student\\problem\\SingleChoice.vue"],"sourcesContent":["<template>\r\n  <el-row style=\"width: 100%\" class=\"first\">\r\n    <div class=\"question-container\">\r\n      <h3></h3>\r\n      <el-radio-group class=\"optiongroup\" v-model=\"select\">\r\n        <el-radio\r\n            label=\"A\"\r\n        >\r\n          {{question.opa}}\r\n        </el-radio>\r\n        <el-radio\r\n            label=\"B\"\r\n        >\r\n          {{question.opb}}\r\n        </el-radio>\r\n        <el-radio\r\n            label=\"C\"\r\n        >\r\n          {{question.opc}}\r\n        </el-radio>\r\n        <el-radio\r\n            label=\"D\"\r\n        >\r\n          {{question.opd}}\r\n        </el-radio>\r\n      </el-radio-group>\r\n    </div>\r\n  </el-row>\r\n\r\n</template>\r\n\r\n<script setup>\r\nimport { defineProps } from 'vue'\r\n\r\n// let currentQuestionIndex = 0;\r\ndefineProps({\r\n  question: {\r\n    type: Object,\r\n    required: true\r\n  }\r\n});\r\n\r\n</script>\r\n\r\n\r\n<!--<script>-->\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      // 题库数据-->\r\n<!--      questions: [-->\r\n<!--        { title: \"问题 1: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: 'A', answer: 'null' },-->\r\n<!--        { title: \"问题 2: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 3: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 4: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 5: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 6: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 7: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 8: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 9: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 10: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--      ],-->\r\n<!--      currentQuestionIndex: 0, // 当前题目索引-->\r\n<!--      currentAnswer: [], // 当前题目的答案-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  computed: {-->\r\n<!--    // 获取当前显示的题目-->\r\n<!--    currentQuestion() {-->\r\n<!--      return this.questions[this.currentQuestionIndex];-->\r\n<!--    },-->\r\n<!--    // 是否禁用提交按钮-->\r\n<!--    isSubmitDisabled() {-->\r\n<!--      // 如果有任何题目未答，则禁用提交按钮-->\r\n<!--      return this.questions.some(question => !question.answered);-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    // 跳转到指定题目-->\r\n<!--    goToQuestion(index) {-->\r\n<!--      this.currentQuestionIndex = index;-->\r\n<!--      const currentQuestion = this.questions[index];-->\r\n\r\n<!--      // 如果题目已答过，恢复答案-->\r\n<!--      if (currentQuestion.answered) {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;-->\r\n<!--      } else {-->\r\n<!--        // 否则，不显示任何答案（保持空白状态）-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 下一题-->\r\n<!--    nextQuestion() {-->\r\n<!--      if (this.currentQuestionIndex < this.questions.length - 1) {-->\r\n<!--        this.autoSaveAnswer(); // 自动保存答案-->\r\n<!--        this.currentQuestionIndex++; // 跳转到下一题-->\r\n<!--        this.restoreAnswerIfNeeded(); // 恢复下一个题目的答案（如果有）-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 上一题-->\r\n<!--    previousQuestion() {-->\r\n<!--      if (this.currentQuestionIndex > 0) {-->\r\n<!--        this.autoSaveAnswer(); // 自动保存答案-->\r\n<!--        this.currentQuestionIndex&#45;&#45;; // 跳转到上一题-->\r\n<!--        this.restoreAnswerIfNeeded(); // 恢复上一个题目的答案（如果有）-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 自动保存答案-->\r\n<!--    autoSaveAnswer() {-->\r\n<!--      const currentQuestion = this.questions[this.currentQuestionIndex];-->\r\n<!--      // 只有在当前题目有答案时才保存-->\r\n<!--      if (this.currentAnswer !== null && this.currentAnswer.length > 0) {-->\r\n<!--        currentQuestion.answer = this.currentAnswer; // 保存答案-->\r\n<!--        currentQuestion.answered = true; // 标记为已答-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 恢复答案，如果已经答过-->\r\n<!--    restoreAnswerIfNeeded() {-->\r\n<!--      const currentQuestion = this.questions[this.currentQuestionIndex];-->\r\n<!--      if (currentQuestion.answered) {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;-->\r\n<!--      } else {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 回答选项变化时，自动保存-->\r\n<!--    onAnswerChange() {-->\r\n<!--      this.autoSaveAnswer();-->\r\n<!--      // 移除自动跳转的逻辑，完全由用户控制-->\r\n<!--    },-->\r\n<!--    // 提交答案-->\r\n<!--    submit() {-->\r\n<!--      if (this.isSubmitDisabled) {-->\r\n<!--        this.$message.warning(\"请完成所有题目后再提交！\");-->\r\n<!--      } else {-->\r\n<!--        alert(\"已提交答案！\");-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<style scoped>\r\n/* 左侧题目 */\r\n.question-container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n\r\n}\r\n\r\n.navigation-buttons {\r\n  margin-top: 20px;\r\n}\r\n\r\n.question-grid {\r\n  width: 200px;\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr); /* 每行 5 个题目 */\r\n  grid-gap: 10px;\r\n\r\n  .el-button {\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.question-grid .el-button {\r\n  width: 40px; /* 使按钮宽度自适应 */\r\n  height: 40px; /* 统一按钮高度 */\r\n  padding: 0;\r\n}\r\n\r\n.first {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.second {\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.optiongroup {\r\n  display: grid;\r\n\r\n}\r\n\r\n</style>\r\n\r\n"],"mappings":";;EAESA,KAAK,EAAC;AAAoB;;;;;uBADjCC,YAAA,CA0BSC,iBAAA;IA1BDC,KAAmB,EAAnB;MAAA;IAAA,CAAmB;IAACH,KAAK,EAAC;;IADpCI,OAAA,EAAAC,QAAA,CAEI,MAwBM,CAxBNC,mBAAA,CAwBM,OAxBNC,UAwBM,G,0BAvBJD,mBAAA,CAAS,sCACTE,YAAA,CAqBiBC,yBAAA;MArBDT,KAAK,EAAC,aAAa;MAJzCU,UAAA,EAImDC,IAAA,CAAAC,MAAM;MAJzD,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAImDH,IAAA,CAAAC,MAAM,GAAAE,MAAA;;MAJzDV,OAAA,EAAAC,QAAA,CAKQ,MAIW,CAJXG,YAAA,CAIWO,mBAAA;QAHPC,KAAK,EAAC;MAAG;QANrBZ,OAAA,EAAAC,QAAA,CAQU,MAAgB,CAR1BY,gBAAA,CAAAC,gBAAA,CAQYC,MAAA,CAAAC,QAAQ,CAACC,GAAG,iB;QARxBC,CAAA;UAUQd,YAAA,CAIWO,mBAAA;QAHPC,KAAK,EAAC;MAAG;QAXrBZ,OAAA,EAAAC,QAAA,CAaU,MAAgB,CAb1BY,gBAAA,CAAAC,gBAAA,CAaYC,MAAA,CAAAC,QAAQ,CAACG,GAAG,iB;QAbxBD,CAAA;UAeQd,YAAA,CAIWO,mBAAA;QAHPC,KAAK,EAAC;MAAG;QAhBrBZ,OAAA,EAAAC,QAAA,CAkBU,MAAgB,CAlB1BY,gBAAA,CAAAC,gBAAA,CAkBYC,MAAA,CAAAC,QAAQ,CAACI,GAAG,iB;QAlBxBF,CAAA;UAoBQd,YAAA,CAIWO,mBAAA;QAHPC,KAAK,EAAC;MAAG;QArBrBZ,OAAA,EAAAC,QAAA,CAuBU,MAAgB,CAvB1BY,gBAAA,CAAAC,gBAAA,CAuBYC,MAAA,CAAAC,QAAQ,CAACK,GAAG,iB;QAvBxBH,CAAA;;MAAAA,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}