{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"question-container\"\n};\nconst _hoisted_2 = {\n  class: \"navigation-buttons\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_el_radio = _resolveComponent(\"el-radio\");\n  const _component_el_radio_group = _resolveComponent(\"el-radio-group\");\n  const _component_el_row = _resolveComponent(\"el-row\");\n  const _component_el_button = _resolveComponent(\"el-button\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_el_row, {\n    style: {\n      \"width\": \"100%\"\n    },\n    class: \"first\"\n  }, {\n    default: _withCtx(() => [_createCommentVNode(\" 左侧当前题目 \"), _createElementVNode(\"div\", _hoisted_1, [_createElementVNode(\"h3\", null, _toDisplayString($setup.currentQuestion.title), 1 /* TEXT */), _createVNode(_component_el_radio_group, {\n      onChange: $setup.onAnswerChange,\n      class: \"optiongroup\",\n      modelValue: $setup.select,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.select = $event)\n    }, {\n      default: _withCtx(() => [(_openBlock(), _createBlock(_component_el_radio, {\n        key: _ctx.index,\n        label: _ctx.option\n      }, {\n        default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.option), 1 /* TEXT */)]),\n        _: 1 /* STABLE */\n      }, 8 /* PROPS */, [\"label\"]))]),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"modelValue\"])])]),\n    _: 1 /* STABLE */\n  }), _createVNode(_component_el_row, {\n    class: \"second\"\n  }, {\n    default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_el_button, {\n      onClick: _ctx.previousQuestion,\n      disabled: $setup.currentQuestionIndex === 0\n    }, {\n      default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\" 上一题 \")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\", \"disabled\"]), _createVNode(_component_el_button, {\n      onClick: _ctx.nextQuestion,\n      disabled: $setup.currentQuestionIndex === 10\n    }, {\n      default: _withCtx(() => _cache[2] || (_cache[2] = [_createTextVNode(\" 下一题 \")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\", \"disabled\"]), _createVNode(_component_el_button, {\n      onClick: _ctx.submit,\n      type: \"primary\"\n    }, {\n      default: _withCtx(() => _cache[3] || (_cache[3] = [_createTextVNode(\" 提交 \")])),\n      _: 1 /* STABLE */\n    }, 8 /* PROPS */, [\"onClick\"])])]),\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["class","_createElementBlock","_Fragment","_createVNode","_component_el_row","style","default","_withCtx","_createCommentVNode","_createElementVNode","_hoisted_1","_toDisplayString","$setup","currentQuestion","title","_component_el_radio_group","onChange","onAnswerChange","modelValue","select","_cache","$event","_createBlock","_component_el_radio","key","_ctx","index","label","option","_createTextVNode","_","_hoisted_2","_component_el_button","onClick","previousQuestion","disabled","currentQuestionIndex","nextQuestion","submit","type"],"sources":["C:\\Users\\C\\Desktop\\bishe\\src\\components\\student\\SingleChoice.vue"],"sourcesContent":["<template>\r\n  <el-row style=\"width: 100%\" class=\"first\">\r\n    <!-- 左侧当前题目 -->\r\n      <div class=\"question-container\">\r\n        <h3>{{ currentQuestion.title }}</h3>\r\n          <el-radio-group  @change=\"onAnswerChange\" class=\"optiongroup\" v-model=\"select\">\r\n            <el-radio\r\n                :key=\"index\"\r\n                :label=\"option\"\r\n            >\r\n              {{ option }}\r\n            </el-radio>\r\n          </el-radio-group>\r\n      </div>\r\n    </el-row>\r\n\r\n  <el-row class=\"second\">\r\n    <div class=\"navigation-buttons\">\r\n      <el-button @click=\"previousQuestion\" :disabled=\"currentQuestionIndex === 0\">\r\n        上一题\r\n      </el-button>\r\n      <el-button @click=\"nextQuestion\" :disabled=\"currentQuestionIndex === 10\">\r\n        下一题\r\n      </el-button>\r\n      <el-button\r\n          @click=\"submit\"\r\n          type=\"primary\"\r\n      >\r\n        提交\r\n      </el-button>\r\n    </div>\r\n  </el-row>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue'\r\n\r\nlet currentQuestionIndex = 0;\r\n\r\nlet select = ref('')\r\n\r\nconst currentQuestion = {\r\n  title: 'abc',\r\n  options: [\r\n      \"A.111\",\r\n      \"B.112\",\r\n      \"C.113\",\r\n      \"D.114\",\r\n  ]\r\n};\r\n\r\nconst onAnswerChange = (e) => {\r\n  console.log(e);\r\n}\r\n\r\n\r\n</script>\r\n\r\n\r\n<!--<script>-->\r\n<!--export default {-->\r\n<!--  data() {-->\r\n<!--    return {-->\r\n<!--      // 题库数据-->\r\n<!--      questions: [-->\r\n<!--        { title: \"问题 1: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: 'A', answer: 'null' },-->\r\n<!--        { title: \"问题 2: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 3: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 4: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 5: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 6: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 7: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 8: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--        { title: \"问题 9: 选择正确的选项\", type: \"single\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: null },-->\r\n<!--        { title: \"问题 10: 选择多个选项\", type: \"multiple\", options: [\"A\", \"B\", \"C\", \"D\"], answered: false, answer: [] },-->\r\n<!--      ],-->\r\n<!--      currentQuestionIndex: 0, // 当前题目索引-->\r\n<!--      currentAnswer: [], // 当前题目的答案-->\r\n<!--    };-->\r\n<!--  },-->\r\n<!--  computed: {-->\r\n<!--    // 获取当前显示的题目-->\r\n<!--    currentQuestion() {-->\r\n<!--      return this.questions[this.currentQuestionIndex];-->\r\n<!--    },-->\r\n<!--    // 是否禁用提交按钮-->\r\n<!--    isSubmitDisabled() {-->\r\n<!--      // 如果有任何题目未答，则禁用提交按钮-->\r\n<!--      return this.questions.some(question => !question.answered);-->\r\n<!--    }-->\r\n<!--  },-->\r\n<!--  methods: {-->\r\n<!--    // 跳转到指定题目-->\r\n<!--    goToQuestion(index) {-->\r\n<!--      this.currentQuestionIndex = index;-->\r\n<!--      const currentQuestion = this.questions[index];-->\r\n\r\n<!--      // 如果题目已答过，恢复答案-->\r\n<!--      if (currentQuestion.answered) {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;-->\r\n<!--      } else {-->\r\n<!--        // 否则，不显示任何答案（保持空白状态）-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 下一题-->\r\n<!--    nextQuestion() {-->\r\n<!--      if (this.currentQuestionIndex < this.questions.length - 1) {-->\r\n<!--        this.autoSaveAnswer(); // 自动保存答案-->\r\n<!--        this.currentQuestionIndex++; // 跳转到下一题-->\r\n<!--        this.restoreAnswerIfNeeded(); // 恢复下一个题目的答案（如果有）-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 上一题-->\r\n<!--    previousQuestion() {-->\r\n<!--      if (this.currentQuestionIndex > 0) {-->\r\n<!--        this.autoSaveAnswer(); // 自动保存答案-->\r\n<!--        this.currentQuestionIndex&#45;&#45;; // 跳转到上一题-->\r\n<!--        this.restoreAnswerIfNeeded(); // 恢复上一个题目的答案（如果有）-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 自动保存答案-->\r\n<!--    autoSaveAnswer() {-->\r\n<!--      const currentQuestion = this.questions[this.currentQuestionIndex];-->\r\n<!--      // 只有在当前题目有答案时才保存-->\r\n<!--      if (this.currentAnswer !== null && this.currentAnswer.length > 0) {-->\r\n<!--        currentQuestion.answer = this.currentAnswer; // 保存答案-->\r\n<!--        currentQuestion.answered = true; // 标记为已答-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 恢复答案，如果已经答过-->\r\n<!--    restoreAnswerIfNeeded() {-->\r\n<!--      const currentQuestion = this.questions[this.currentQuestionIndex];-->\r\n<!--      if (currentQuestion.answered) {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [...currentQuestion.answer] : currentQuestion.answer;-->\r\n<!--      } else {-->\r\n<!--        this.currentAnswer = Array.isArray(currentQuestion.answer) ? [] : null;-->\r\n<!--      }-->\r\n<!--    },-->\r\n<!--    // 回答选项变化时，自动保存-->\r\n<!--    onAnswerChange() {-->\r\n<!--      this.autoSaveAnswer();-->\r\n<!--      // 移除自动跳转的逻辑，完全由用户控制-->\r\n<!--    },-->\r\n<!--    // 提交答案-->\r\n<!--    submit() {-->\r\n<!--      if (this.isSubmitDisabled) {-->\r\n<!--        this.$message.warning(\"请完成所有题目后再提交！\");-->\r\n<!--      } else {-->\r\n<!--        alert(\"已提交答案！\");-->\r\n<!--      }-->\r\n<!--    }-->\r\n<!--  }-->\r\n<!--};-->\r\n<!--</script>-->\r\n\r\n<style scoped>\r\n/* 左侧题目 */\r\n.question-container {\r\n  padding: 20px;\r\n  background-color: #fff;\r\n\r\n}\r\n\r\n.navigation-buttons {\r\n  margin-top: 20px;\r\n}\r\n\r\n.question-grid {\r\n  width: 200px;\r\n  display: grid;\r\n  grid-template-columns: repeat(5, 1fr); /* 每行 5 个题目 */\r\n  grid-gap: 10px;\r\n  .el-button{\r\n    margin-left: 0;\r\n  }\r\n}\r\n\r\n.question-grid .el-button {\r\n  width: 40px; /* 使按钮宽度自适应 */\r\n  height: 40px; /* 统一按钮高度 */\r\n  padding: 0;\r\n}\r\n\r\n.first{\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.second{\r\n  display: flex;\r\n  justify-content: center;\r\n}\r\n\r\n.optiongroup{\r\n  display: grid;\r\n\r\n}\r\n\r\n</style>\r\n\r\n"],"mappings":";;EAGWA,KAAK,EAAC;AAAoB;;EAc5BA,KAAK,EAAC;AAAoB;;;;;;uBAjBnCC,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAaWC,iBAAA;IAbHC,KAAmB,EAAnB;MAAA;IAAA,CAAmB;IAACL,KAAK,EAAC;;IADpCM,OAAA,EAAAC,QAAA,CAEI,MAAe,CAAfC,mBAAA,YAAe,EACbC,mBAAA,CAUM,OAVNC,UAUM,GATJD,mBAAA,CAAoC,YAAAE,gBAAA,CAA7BC,MAAA,CAAAC,eAAe,CAACC,KAAK,kBAC1BX,YAAA,CAOiBY,yBAAA;MAPCC,QAAM,EAAEJ,MAAA,CAAAK,cAAc;MAAEjB,KAAK,EAAC,aAAa;MALvEkB,UAAA,EAKiFN,MAAA,CAAAO,MAAM;MALvF,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAKiFT,MAAA,CAAAO,MAAM,GAAAE,MAAA;;MALvFf,OAAA,EAAAC,QAAA,CAMY,MAKW,E,cALXe,YAAA,CAKWC,mBAAA;QAJNC,GAAG,EAAEC,IAAA,CAAAC,KAAK;QACVC,KAAK,EAAEF,IAAA,CAAAG;;QARxBtB,OAAA,EAAAC,QAAA,CAUc,MAAY,CAV1BsB,gBAAA,CAAAlB,gBAAA,CAUiBc,IAAA,CAAAG,MAAM,iB;QAVvBE,CAAA;;MAAAA,CAAA;;IAAAA,CAAA;MAgBE3B,YAAA,CAeSC,iBAAA;IAfDJ,KAAK,EAAC;EAAQ;IAhBxBM,OAAA,EAAAC,QAAA,CAiBI,MAaM,CAbNE,mBAAA,CAaM,OAbNsB,UAaM,GAZJ5B,YAAA,CAEY6B,oBAAA;MAFAC,OAAK,EAAER,IAAA,CAAAS,gBAAgB;MAAGC,QAAQ,EAAEvB,MAAA,CAAAwB,oBAAoB;;MAlB1E9B,OAAA,EAAAC,QAAA,CAkBkF,MAE5Ea,MAAA,QAAAA,MAAA,OApBNS,gBAAA,CAkBkF,OAE5E,E;MApBNC,CAAA;gDAqBM3B,YAAA,CAEY6B,oBAAA;MAFAC,OAAK,EAAER,IAAA,CAAAY,YAAY;MAAGF,QAAQ,EAAEvB,MAAA,CAAAwB,oBAAoB;;MArBtE9B,OAAA,EAAAC,QAAA,CAqB+E,MAEzEa,MAAA,QAAAA,MAAA,OAvBNS,gBAAA,CAqB+E,OAEzE,E;MAvBNC,CAAA;gDAwBM3B,YAAA,CAKY6B,oBAAA;MAJPC,OAAK,EAAER,IAAA,CAAAa,MAAM;MACdC,IAAI,EAAC;;MA1BfjC,OAAA,EAAAC,QAAA,CA2BO,MAEDa,MAAA,QAAAA,MAAA,OA7BNS,gBAAA,CA2BO,MAED,E;MA7BNC,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}